@page "/Tasker"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject IJSRuntime JS;
@inject ITaskerService TaskerService;

<div class="d-flex justify-content-center align-items-center h-100">
    <div class="taskform">
        <div class="text-center m-5">
            <img src="/images/Tasker_600.png" width="300" />
        </div>
        <div>
            <EditForm Model="taskerItem" OnValidSubmit="AddItem">
                <DataAnnotationsValidator />
                <div class="d-flex flex-row gap-2">
                    <InputText @ref="textBoxTask"
                               class="form-control"
                               placeholder="Enter a Task"
                               @bind-Value="@taskerItem.Name">
                    </InputText>
                    <button type="submit" class="btn btn-cf-blue">Add</button>
                </div>
                <div><ValidationMessage For="() => taskerItem.Name" /></div>
            </EditForm>
        </div>
        <hr />
        <div class="vstack">
            @foreach (var lineItem in taskList)
            {
                <TaskerLine @key="lineItem.Id"
                            Item="lineItem"
                            OnDeleteCallBack="@DeleteItem"
                            OnChangeCallBack="@UpdateItem" />
            }

        </div>
    </div>
</div>


@code {

    private TaskerItem taskerItem = new();
    private List<TaskerItem> taskList = new();
    private InputText? textBoxTask { get; set; }

    private bool focusAfterRender;

    #region lifecycle events
    protected override async Task OnInitializedAsync()
    {
        taskList = await TaskerService.GetTaskerItemsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || focusAfterRender)
        {
            if (textBoxTask?.Element is not null)
            {
                await textBoxTask.Element.Value.FocusAsync();
                focusAfterRender = false;
            }
        }
    }
    #endregion

    private async Task AddItem()
    {
        await TaskerService.AddTaskerItem(taskerItem);
        taskList = await TaskerService.GetTaskerItemsAsync();

        taskerItem = new();

        // tell the textbox to be focused after the render
        focusAfterRender = true;

        // FocusAsync needs to happen in OnAfterRender because the textbox will 
        // re-render after this method, which prevents FocusAsync from working correctly
    }

    private async Task UpdateItem(TaskerItem item)
    {
        await TaskerService.SaveTaskerItemsAsync(taskList);
    }

    private async Task DeleteItem(Guid itemId)
    {
        // remove the item
        await TaskerService.RemoveTaskerItem(itemId);
        // refresh the list
        taskList = await TaskerService.GetTaskerItemsAsync();
    }

}

