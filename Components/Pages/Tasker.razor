@page "/Tasker"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject IJSRuntime JS;
@inject ITaskerService TaskerService;    

<div class="d-flex justify-content-center align-items-center h-100">
    <div class="taskform">
        <div class="text-center m-5">
            <img src="/images/Tasker_600.png" width="300" />
        </div>
        <div>
            <EditForm Model="ti" OnValidSubmit="addItem">
                <DataAnnotationsValidator />
                <div class="d-flex flex-row gap-2">
                    <InputText @ref=textBoxTask class="form-control" placeholder="Enter a Task" @bind-Value="@ti.Name"></InputText>
                    <button type="submit" class="btn btn-cf-blue">Add</button>
                </div>
                <div><ValidationMessage For="() => ti.Name" /></div>
            </EditForm>
        </div>
        <hr />
        <div class="vstack">
            @foreach (var lineItem in taskList)
            {
                <TaskerLine Item="lineItem" OnDeleteCallBack="@deleteItem" OnChangeCallBack="@updateItem" />
            }

        </div>
    </div>
</div>


@code {

    private TaskerItem ti = new();
    private List<TaskerItem> taskList = new();
    private InputText? textBoxTask { get; set; }

    #region lifecycle events
    protected override async Task OnInitializedAsync()
    {
       taskList = await TaskerService.GetTaskerItemsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await textBoxTask!.Element!.Value.FocusAsync();
        }
    }
    #endregion

    private async void addItem()
    {
        ti.ID = Guid.NewGuid();
        taskList.Add(ti);
        ti = new();

        await TaskerService.SaveTaskerItemsAsync(taskList);
        await textBoxTask!.Element!.Value.FocusAsync();
    }

    private async void updateItem(TaskerItem item)
    {
        await TaskerService.SaveTaskerItemsAsync(taskList);
    }

    private async void deleteItem(TaskerItem item)
    {
        taskList.Remove(item);
        await TaskerService.SaveTaskerItemsAsync(taskList);
    }
      
}

